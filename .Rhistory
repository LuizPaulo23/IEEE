# Ajustar modelo AR(1)
modelo_ar1 <- Arima(vendas_ts, order = c(1, 0, 0))
summary(modelo_ar1)
# Ajustar modelo AR(1)
modelo_ar1 <- Arima(vendas_ts, order = c(1, 0, 0))
summary(modelo_ar1)
# Ajustar modelo MA(1)
modelo_ma1 <- Arima(vendas_ts, order = c(0, 0, 1))
summary(modelo_ma1)
# Ajustar modelo ARMA(1,1)
modelo_arma11 <- Arima(vendas_ts, order = c(1, 0, 1))
summary(modelo_arma11)
# Plotar diagnósticos do modelo AR(1)
checkresiduals(modelo_ar1)
# Plotar diagnósticos do modelo MA(1)
checkresiduals(modelo_ma1)
# Plotar diagnósticos do modelo ARMA(1,1)
checkresiduals(modelo_arma11)
# Carregar pacotes
library(ggplot2)
library(forecast)
# Criando dados fictícios de vendas mensais com tendência
set.seed(123)
vendas <- cumsum(rnorm(120, mean = 10, sd = 5))  # Vendas mensais com tendência
vendas_ts <- ts(vendas, start = c(2020, 1), frequency = 12)
# Visualizando a série temporal
plot(vendas_ts, main = "Vendas Mensais", xlab = "Ano", ylab = "Vendas")
# Plotar ACF e PACF da série original
acf_vendas <- Acf(vendas_ts, main = "Função de Autocorrelação (ACF) - Série Original")
# Carregar pacotes
library(ggplot2)
library(forecast)
# Criando dados fictícios de vendas mensais com tendência
set.seed(123)
vendas <- cumsum(rnorm(120, mean = 10, sd = 5))  # Vendas mensais com tendência
vendas_ts <- ts(vendas, start = c(2020, 1), frequency = 12)
# Visualizando a série temporal
plot(vendas_ts, main = "Vendas Mensais", xlab = "Ano", ylab = "Vendas")
# Visualizando a série temporal
plot(vendas_ts, main = "Vendas Mensais", xlab = "Ano", ylab = "Vendas")
# Plotar ACF e PACF da série original
acf_vendas <- Acf(vendas_ts, main = "Função de Autocorrelação (ACF) - Série Original")
pacf_vendas <- Pacf(vendas_ts, main = "Função de Autocorrelação Parcial (PACF) - Série Original")
# Diferenciar a série (primeira diferença)
vendas_diff <- diff(vendas_ts)
# Visualizar a série diferenciada
plot(vendas_diff, main = "Vendas Mensais Diferenciadas", xlab = "Ano", ylab = "Diferença nas Vendas")
# Plotar ACF e PACF da série diferenciada
acf_vendas_diff <- Acf(vendas_diff, main = "Função de Autocorrelação (ACF) - Série Diferenciada")
pacf_vendas_diff <- Pacf(vendas_diff, main = "Função de Autocorrelação Parcial (PACF) - Série Diferenciada")
# Ajustar modelo ARIMA
modelo_arima <- auto.arima(vendas_ts)
summary(modelo_arima)
summary(modelo_arima)
# Diagnóstico dos resíduos
checkresiduals(modelo_arima)
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
# Carregar o conjunto de dados AirPassengers
data("AirPassengers")
passengers_ts <- AirPassengers
# Visualizar a série temporal
autoplot(passengers_ts) + ggtitle("Número de Passageiros Aéreos (1949-1960)") + xlab("Ano") + ylab("Milhares de Passageiros")
# Teste de Dickey-Fuller aumentado
adf_test <- adf.test(passengers_ts)
# Teste de Dickey-Fuller aumentado
library(tseries)
adf_test <- adf.test(passengers_ts)
print(adf_test)
# Visualizar a série temporal
autoplot(passengers_ts) + ggtitle("Número de Passageiros Aéreos (1949-1960)") + xlab("Ano") + ylab("Milhares de Passageiros")
# Diferenciar a série (primeira diferença)
passengers_diff <- diff(passengers_ts, differences = 1)
# Visualizar a série diferenciada
autoplot(passengers_diff) + ggtitle("Número de Passageiros Aéreos Diferenciado (1949-1960)") + xlab("Ano") + ylab("Diferença no Número de Passageiros")
# Plotar ACF e PACF da série diferenciada
acf_passengers_diff <- Acf(passengers_diff, main = "ACF da Série Diferenciada")
pacf_passengers_diff <- Pacf(passengers_diff, main = "PACF da Série Diferenciada")
# Plotar ACF e PACF da série diferenciada
acf_passengers_diff <- Acf(passengers_diff, main = "ACF da Série Diferenciada")
pacf_passengers_diff <- Pacf(passengers_diff, main = "PACF da Série Diferenciada")
# Ajustar o modelo ARIMA
modelo_arima <- auto.arima(passengers_ts)
summary(modelo_arima)
summary(modelo_arima)
# Ajustar o modelo ARIMA
modelo_arima <- auto.arima(passengers_ts)
summary(modelo_arima)
# Diagnóstico dos resíduos
checkresiduals(modelo_arima)
# Fazer previsões para os próximos 24 meses
previsao <- forecast(modelo_arima, h = 24)
autoplot(previsao) + ggtitle("Previsão do Número de Passageiros Aéreos") + xlab("Ano") + ylab("Milhares de Passageiros")
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
library(tseries)
# Criar uma série temporal fictícia de vendas mensais com tendência
set.seed(123)
vendas <- cumsum(rnorm(120, mean = 10, sd = 5))  # Vendas mensais com tendência
vendas_ts <- ts(vendas, start = c(2020, 1), frequency = 12)
# Criar uma variável exógena fictícia (por exemplo, campanhas de marketing)
marketing <- rnorm(120, mean = 20, sd = 5)
marketing_ts <- ts(marketing, start = c(2020, 1), frequency = 12)
# Visualizar a série temporal e a variável exógena
autoplot(vendas_ts) + ggtitle("Vendas Mensais") + xlab("Ano") + ylab("Vendas")
autoplot(marketing_ts) + ggtitle("Campanhas de Marketing Mensais") + xlab("Ano") + ylab("Gastos em Marketing")
# Teste de Dickey-Fuller aumentado para a série de vendas
adf_test_vendas <- adf.test(vendas_ts)
print(adf_test_vendas)
# Teste de Dickey-Fuller aumentado para a variável exógena
adf_test_marketing <- adf.test(marketing_ts)
print(adf_test_marketing)
# Teste de Dickey-Fuller aumentado para a variável exógena
adf_test_marketing <- adf.test(marketing_ts)
print(adf_test_marketing)
# Diferenciar a série de vendas (primeira diferença)
vendas_diff <- diff(vendas_ts)
marketing_diff <- diff(marketing_ts)
# Diferenciar a série de vendas (primeira diferença)
vendas_diff <- diff(vendas_ts)
marketing_diff <- diff(marketing_ts)
# Visualizar a série diferenciada
autoplot(vendas_diff) + ggtitle("Vendas Mensais Diferenciadas") + xlab("Ano") + ylab("Diferença nas Vendas")
autoplot(marketing_diff) + ggtitle("Campanhas de Marketing Mensais Diferenciadas") + xlab("Ano") + ylab("Diferença nos Gastos em Marketing")
# Ajustar o modelo ARIMAX
modelo_arimax <- auto.arima(vendas_ts, xreg = marketing_ts)
summary(modelo_arimax)
# Diagnóstico dos resíduos
checkresiduals(modelo_arimax)
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
library(tseries)
# Criar uma série temporal fictícia de vendas mensais com tendência
set.seed(123)
vendas <- cumsum(rnorm(120, mean = 10, sd = 5))
vendas_ts <- ts(vendas, start = c(2020, 1), frequency = 12)
# Criar duas variáveis exógenas fictícias (ex: campanhas de marketing e promoções)
marketing <- rnorm(120, mean = 20, sd = 5)
promocoes <- rnorm(120, mean = 15, sd = 3)
marketing_ts <- ts(marketing, start = c(2020, 1), frequency = 12)
promocoes_ts <- ts(promocoes, start = c(2020, 1), frequency = 12)
# Visualizar a série temporal e as variáveis exógenas
autoplot(vendas_ts) + ggtitle("Vendas Mensais") + xlab("Ano") + ylab("Vendas")
autoplot(marketing_ts) + ggtitle("Campanhas de Marketing Mensais") + xlab("Ano") + ylab("Gastos em Marketing")
autoplot(promocoes_ts) + ggtitle("Promoções Mensais") + xlab("Ano") + ylab("Gastos em Promoções")
# Teste de Dickey-Fuller aumentado para a série de vendas
adf_test_vendas <- adf.test(vendas_ts)
print(adf_test_vendas)
# Teste de Dickey-Fuller aumentado para as variáveis exógenas
adf_test_marketing <- adf.test(marketing_ts)
print(adf_test_marketing)
adf_test_promocoes <- adf.test(promocoes_ts)
print(adf_test_promocoes)
# Diferenciar a série de vendas (primeira diferença)
vendas_diff <- diff(vendas_ts)
marketing_diff <- diff(marketing_ts)
promocoes_diff <- diff(promocoes_ts)
# Visualizar as séries diferenciadas
autoplot(vendas_diff) + ggtitle("Vendas Mensais Diferenciadas") + xlab("Ano") + ylab("Diferença nas Vendas")
autoplot(marketing_diff) + ggtitle("Campanhas de Marketing Mensais Diferenciadas") + xlab("Ano") + ylab("Diferença nos Gastos em Marketing")
autoplot(promocoes_diff) + ggtitle("Promoções Mensais Diferenciadas") + xlab("Ano") + ylab("Diferença nos Gastos em Promoções")
# Ajustar o modelo ARIMAX com duas variáveis exógenas
xreg <- cbind(marketing_ts, promocoes_ts)
modelo_arimax <- auto.arima(vendas_ts, xreg = xreg)
summary(modelo_arimax)
summary(modelo_arimax)
# Diagnóstico dos resíduos
checkresiduals(modelo_arimax)
# Previsão para os próximos 24 meses (assumindo valores futuros das variáveis exógenas)
future_marketing <- rnorm(24, mean = 20, sd = 5)
future_promocoes <- rnorm(24, mean = 15, sd = 3)
future_xreg <- cbind(future_marketing, future_promocoes)
previsao_arimax <- forecast(modelo_arimax, xreg = future_xreg, h = 24)
autoplot(previsao_arimax) + ggtitle("Previsão de Vendas com ARIMAX") + xlab("Ano") + ylab("Vendas")
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
library(tseries)
# Carregar o conjunto de dados AirPassengers
data("AirPassengers")
passengers_ts <- AirPassengers
# Visualizar a série temporal
autoplot(passengers_ts) + ggtitle("Número de Passageiros Aéreos (1949-1960)") + xlab("Ano") + ylab("Milhares de Passageiros")
# Teste de Dickey-Fuller aumentado
adf_test <- adf.test(passengers_ts)
print(adf_test)
# Diferenciação não sazonal e sazonal
passengers_diff <- diff(passengers_ts, differences = 1)
passengers_diff_seasonal <- diff(passengers_diff, lag = 12)
# Visualizar a série diferenciada
autoplot(passengers_diff_seasonal) + ggtitle("Número de Passageiros Aéreos Diferenciado") + xlab("Ano") + ylab("Diferença no Número de Passageiros")
# Plotar ACF e PACF da série diferenciada
acf_passengers_diff_seasonal <- Acf(passengers_diff_seasonal, main = "ACF da Série Diferenciada Sazonalmente")
pacf_passengers_diff_seasonal <- Pacf(passengers_diff_seasonal, main = "PACF da Série Diferenciada Sazonalmente")
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
library(tseries)
# Carregar o conjunto de dados AirPassengers
data("AirPassengers")
passengers_ts <- AirPassengers
# Visualizar a série temporal
autoplot(passengers_ts) + ggtitle("Número de Passageiros Aéreos (1949-1960)") + xlab("Ano") + ylab("Milhares de Passageiros")
# Teste de Dickey-Fuller aumentado
adf_test <- adf.test(passengers_ts)
print(adf_test)
# Diferenciação não sazonal e sazonal
passengers_diff <- diff(passengers_ts, differences = 1)
passengers_diff_seasonal <- diff(passengers_diff, lag = 12)
# Visualizar a série diferenciada
autoplot(passengers_diff_seasonal) + ggtitle("Número de Passageiros Aéreos Diferenciado") + xlab("Ano") + ylab("Diferença no Número de Passageiros")
# Plotar ACF e PACF da série diferenciada
acf_passengers_diff_seasonal <- Acf(passengers_diff_seasonal, main = "ACF da Série Diferenciada Sazonalmente")
pacf_passengers_diff_seasonal <- Pacf(passengers_diff_seasonal, main = "PACF da Série Diferenciada Sazonalmente")
# Ajustar o modelo SARIMA
modelo_sarima <- auto.arima(passengers_ts, seasonal = TRUE)
# Ajustar o modelo SARIMA
modelo_sarima <- auto.arima(passengers_ts, seasonal = TRUE)
summary(modelo_sarima)
# Diagnóstico dos resíduos
checkresiduals(modelo_sarima)
# Fazer previsões para os próximos 24 meses
previsao_sarima <- forecast(modelo_sarima, h = 24)
autoplot(previsao_sarima) + ggtitle("Previsão do Número de Passageiros Aéreos com SARIMA") + xlab("Ano") + ylab("Milhares de Passageiros")
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
library(tseries)
# Carregar o conjunto de dados AirPassengers
data("AirPassengers")
passengers_ts <- AirPassengers
# Visualizar a série temporal
autoplot(passengers_ts) + ggtitle("Número de Passageiros Aéreos (1949-1960)") + xlab("Ano") + ylab("Milhares de Passageiros")
# Teste de Dickey-Fuller aumentado
adf_test <- adf.test(passengers_ts)
print(adf_test)
# Diferenciação não sazonal e sazonal
passengers_diff <- diff(passengers_ts, differences = 1)
passengers_diff_seasonal <- diff(passengers_diff, lag = 12)
# Visualizar a série diferenciada
autoplot(passengers_diff_seasonal) + ggtitle("Número de Passageiros Aéreos Diferenciado") + xlab("Ano") + ylab("Diferença no Número de Passageiros")
# Plotar ACF e PACF da série diferenciada
acf_passengers_diff_seasonal <- Acf(passengers_diff_seasonal, main = "ACF da Série Diferenciada Sazonalmente")
pacf_passengers_diff_seasonal <- Pacf(passengers_diff_seasonal, main = "PACF da Série Diferenciada Sazonalmente")
# Ajustar o modelo SARIMA
modelo_sarima <- auto.arima(passengers_ts, seasonal = TRUE)
summary(modelo_sarima)
# Diagnóstico dos resíduos
checkresiduals(modelo_sarima)
# Fazer previsões para os próximos 24 meses
previsao_sarima <- forecast(modelo_sarima, h = 24)
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
# Carregar e visualizar os dados (exemplo: série mensal de vendas)
data("AirPassengers")
passengers_ts <- AirPassengers
# Ajustar modelo SES
modelo_ses <- ses(passengers_ts)
previsao_ses <- forecast(modelo_ses, h = 24)
# Carregar e visualizar os dados (exemplo: série mensal de vendas)
data("AirPassengers")
passengers_ts <- AirPassengers
# Ajustar modelo SES
modelo_ses <- ses(passengers_ts)
previsao_ses <- forecast(modelo_ses, h = 24)
# Ajustar modelo DES
modelo_des <- Holt(passengers_ts)
previsao_des <- forecast(modelo_des, h = 24)
# Ajustar modelo DES
modelo_des <- Holt(passengers_ts)
previsao_des <- forecast(modelo_des, h = 24)
# Ajustar modelo TES
modelo_tes <- stlm(passengers_ts, s.window = "periodic")
previsao_tes <- forecast(modelo_tes, h = 24)
# Plotar previsões
autoplot(previsao_ses) + autolayer(passengers_ts, series = "Série Original") + ggtitle("Previsão com SES") + xlab("Ano") + ylab("Número de Passageiros")
autoplot(previsao_des) + autolayer(passengers_ts, series = "Série Original") + ggtitle("Previsão com DES") + xlab("Ano") + ylab("Número de Passageiros")
autoplot(previsao_tes) + autolayer(passengers_ts, series = "Série Original") + ggtitle("Previsão com TES") + xlab("Ano") + ylab("Número de Passageiros")
# Carregar pacotes necessários
library(forecast)
library(ggplot2)
# Criar dados fictícios de vendas mensais e variáveis explicativas
set.seed(123)
meses <- seq(as.Date("2020-01-01"), by = "month", length.out = 36)
vendas <- 1000 + 10 * seq_along(meses) + rnorm(36, mean = 0, sd = 100)
preco <- 50 + rnorm(36, mean = 0, sd = 5)
publicidade <- 200 + rnorm(36, mean = 0, sd = 20)
# Criar um data frame com os dados
dados <- data.frame(Mês = meses, Vendas = vendas, Preço = preco, Publicidade = publicidade)
# Ajustar o modelo de regressão
modelo_regressao <- lm(Vendas ~ Preço + Publicidade, data = dados)
summary(modelo_regressao)
# Fazer previsões com o modelo de regressão
previsao_regressao <- predict(modelo_regressao, newdata = dados)
# Plotar série temporal e previsões
ggplot(dados, aes(x = Mês, y = Vendas)) +
geom_line(color = "blue") +
geom_line(aes(y = previsao_regressao), color = "red", linetype = "dashed") +
labs(title = "Vendas Mensais e Previsões com Modelo de Regressão",
x = "Mês", y = "Vendas") +
theme_minimal()
# Carregar pacotes necessários
library(vars)
# Carregar pacotes necessários
library(vars)
pacman::p_load(vars)
# Carregar pacotes necessários
library(vars)
library(tsibble)
library(ggplot2)
# Carregar dados de exemplo (vendas mensais e preço)
dados <- as_tsibble(economics, key = "date")
# Carregar pacotes necessários
library(vars)
library(tsibble)
library(ggplot2)
# Carregar dados de exemplo (vendas mensais e preço)
dados <- as_tsibble(economics, key = "date")
View(economics)
dados <- as_tsibble(economics, key = "date")
# Carregar pacotes necessários
library(vars)
library(tsibble)
library(ggplot2)
# Carregar dados de exemplo (vendas mensais e preço)
dados <- as_tsibble(economics)
# Ajustar o modelo VAR
modelo_var <- VAR(dados[, c("pce", "pop")], p = 2)
# Análise de impulso-resposta
impulso_resposta <- irf(modelo_var, impulse = "pce", response = "pop", boot = TRUE)
# Plotar impulso-resposta
autoplot(impulso_resposta, ncol = 2, facets = TRUE) +
theme_minimal() +
labs(title = "Análise de Impulso-Resposta: Efeito de Variações no Consumo sobre a População")
View(impulso_resposta)
plot(impulso_resposta)
# Ajustar o modelo VAR
modelo_var <- VAR(dados[, c("pce", "pop")], p = 1)
# Análise de impulso-resposta
impulso_resposta <- irf(modelo_var, impulse = "pce", response = "pop", boot = TRUE)
plot(impulso_resposta)
# Ajustar o modelo VAR
modelo_var <- VAR(dados[, c("pce", "pop")], p = 5)
# Análise de impulso-resposta
impulso_resposta <- irf(modelo_var, impulse = "pce", response = "pop", boot = TRUE)
plot(impulso_resposta)
# Carregar pacotes necessários
library(urca)
# Carregar dados de exemplo (série temporal de inflação e desemprego)
data("UKUnemployment")
# Carregar dados de exemplo (série temporal de inflação e desemprego)
data("UKUnemployment")
# Ajustar o modelo VEC
modelo_vec <- ca.jo(UKUnemployment, ecdet = "const", type = "eigen", K = 2, spec = "longrun")
# Resumo do modelo
summary(modelo_vec)
# Carregar pacotes necessários
library(urca)
# Carregar dados de exemplo (série temporal de PIB e consumo)
data("Nile")
# Teste de cointegração (Teste de Engle-Granger)
teste_eg <- ca.po(Nile, demean = "none", lag = "long", type = "Pu", ecdet = "const", spec = "longrun")
# Carregar pacotes necessários
library(urca)
# Carregar dados de exemplo (série temporal de PIB e consumo)
data("Nile")
# Teste de cointegração (Teste de Engle-Granger)
teste_eg <- ca.po(Nile, demean = "none",
lag = "long",
type = "Pu",
ecdet = "const",
spec = "longrun")
# Resumo do teste de cointegração
summary(teste_eg)
# Teste de cointegração (Teste de Engle-Granger)
teste_eg <- ca.po(Nile, demean = "none",
lag = "long",
type = "Pu",
ecdet = "const",
spec = "longrun")
# Teste de cointegração (Teste de Engle-Granger)
# Teste de cointegração (Teste de Engle-Granger)
teste_eg <- ca.po(Nile, demean = "none", lag = "long", type = "Pu")
# Carregar dados de exemplo (série temporal de PIB e consumo)
data("Nile")
# Teste de cointegração (Teste de Engle-Granger)
# Teste de cointegração (Teste de Engle-Granger)
teste_eg <- ca.po(Nile, demean = "none", lag = "long", type = "Pu")
# Resumo do teste de cointegração
summary(teste_eg)
# Ajustar o modelo VEC
modelo_vec <- ca.jo(Nile, ecdet = "const", type = "eigen", K = 2, spec = "longrun")
# Resumo do modelo VEC
summary(modelo_vec)
# Carregar pacotes necessários
library(urca)
# Carregar dados de exemplo (vendas de cintos de segurança e mortes em acidentes de trânsito)
data("Seatbelts")
# Verificar os primeiros registros dos dados
head(Seatbelts)
# Ajustar o modelo de cointegração
modelo_coint <- ca.jo(Seatbelts[, c("DriversKilled", "front", "rear")], ecdet = "const", type = "eigen", K = 2, spec = "longrun")
# Resumo do modelo de cointegração
summary(modelo_coint)
# Resumo do modelo de cointegração
summary(modelo_coint)
# Carregar pacotes necessários
library(ggplot2)
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
# Carregar pacotes necessários
library(ggplot2)
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
# Verificar os primeiros registros dos dados
head(Seatbelts)
# Carregar pacotes necessários
library(urca)
# Carregar dados de exemplo (vendas de cintos de segurança e mortes em acidentes de trânsito)
data("Seatbelts")
# Verificar os primeiros registros dos dados
head(Seatbelts)
View(Seatbelts)
# Ajustar o modelo de cointegração
modelo_coint <- ca.jo(Seatbelts[, c("DriversKilled", "front", "rear")],
ecdet = "const",
type = "eigen",
K = 2, spec = "longrun")
# Resumo do modelo de cointegração
summary(modelo_coint)
# Carregar pacotes necessários
library(ggplot2)
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
s
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
# geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
# geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
# geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
# Plotar as séries temporais
ggplot(Seatbelts, aes(x = date)) +
# geom_line(aes(y = DriversKilled, color = "Drivers Killed"), size = 1) +
# geom_line(aes(y = front, color = "Front Seatbelt"), size = 1, linetype = "dashed") +
# geom_line(aes(y = rear, color = "Rear Seatbelt"), size = 1, linetype = "dotted") +
labs(title = "Séries Temporais de Mortes em Acidentes de Trânsito e Vendas de Cintos de Segurança",
x = "Data", y = "Quantidade", color = "Variável") +
theme_minimal() +
theme(legend.position = "top")
knitr::opts_chunk$set(echo = FALSE)
data_raw = readr::read_csv("Drugs.csv") %>%
janitor::clean_names() %>%
dplyr::distinct(id, .keep_all = TRUE)
base::rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/IEEE")
pacman::p_load(DataExplorer,
tidyverse,
stargazer,
Amelia,
GGally,
broom,
knitr,
nnet)
THRESHOLD = 2
data_raw = readr::read_csv("Drugs.csv") %>%
janitor::clean_names() %>%
dplyr::distinct(id, .keep_all = TRUE)
View(data_raw)
data_raw = readr::read_csv("Drugs.csv") %>%
janitor::clean_names() %>%
dplyr::distinct(id, .keep_all = TRUE) %>%
dplyr::filter(caff == "CL0")
View(data_raw)
