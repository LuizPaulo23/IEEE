z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = diff(NA, z))
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate("média" = mean(z),
"ω∇Zt" = c(NA, diff(z)))
number_07
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
ω∇Zt = c(NA, diff(z)) * mean)
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"ω∇Zt" = c(NA, diff(z)) * mean)
number_07
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"ω∇Zt" = c(NA, diff(z)) * mean,
"ω∇²Zt" = c(NA, NA, diff(z, differences = 2)) * mean)
# Função para calcular autocorrelação manualmente
auto_corr <- function(x, lag.max) {
n <- length(x)
mean_x <- mean(x)
var_x <- var(x)
acf_values <- numeric(lag.max + 1)
for (lag in 0:lag.max) {
autocov <- sum((x[1:(n - lag)] - mean_x) * (x[(lag + 1):n] - mean_x)) / (n - lag)
acf_values[lag + 1] <- autocov / var_x
}
return(acf_values)
}
number_07 <- data.frame(t = c(1:15),
z = c(47,44,50,62,68,64,80,71,44,38,23,55,56,64,50)) %>%
dplyr::mutate(mean = mean(z),
"diff_1" = c(NA, diff(z)),
"diff_2" = c(NA, NA, diff(z, differences = 2))) %>%
mutate(across(everything(), ~ifelse(is.na(.), "-", .)))
acf_values <- auto_corr(number_07$z, lag.max)
# Calcular autocorrelação para lags de 0 a 20
lag.max <- 1
acf_values <- auto_corr(number_07$z, lag.max)
acf_values
# Função para calcular a autocovariância
autocov <- function(x, lag.max) {
n <- length(x)
mean_x <- mean(x)
autocov_values <- numeric(lag.max + 1)  # Vetor para armazenar as autocovariâncias
for (lag in 0:lag.max) {
# Calcular a autocovariância para um dado lag
autocov_values[lag + 1] <- sum((x[1:(n - lag)] - mean_x) * (x[(lag + 1):n] - mean_x)) / (n - lag)
}
return(autocov_values)
}
autocov_values <- autocov(number_07$z, lag.max)
# Calcular a autocovariância para lags de 0 a 10
lag.max <- 1
autocov_values <- autocov(number_07$z, lag.max)
# Mostrar resultados
autocov_values
autocov = (47 - 54.4) * (44 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)/15
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)/15
autocov
autocov = (47 - 54.44) * (44 - 54.44) + (44 - 54.44) * (50 - 54.44) +
(50 - 54.44) * (62 - 54.44) + (62 - 54.44) * (68 - 54.44) +
(68 - 54.44) * (64 - 54.44) + (64 - 54.44) * (80 - 54.44) +
(80 - 54.44) * (71 - 54.44) + (71 - 54.44) * (44 - 54.44) +
(44 - 54.44) * (38 - 54.44) + (38 - 54.44) * (23 - 54.44) +
(23 - 54.44) * (55 - 54.44) + (55 - 54.44) * (56 - 54.44) +
(56 - 54.44) * (64 - 54.44) + (64 - 54.44) * (50 - 54.44)
autocov/15
autocov/14
mean_z <- mean(number_07$z)
mean_z
# Calcular autocovariância com defasagem de 1
autocov <- sum((number_07$z[1:(nrow(number_07) - 1)] - mean_z) *
(number_07$z[2:nrow(number_07)] - mean_z)) / (nrow(number_07) - 1)
autocov
knitr::opts_chunk$set(echo = TRUE)
base::rm(list = ls())
pacman::p_load(tidyverse, TSstudio, forecast, knitr)
# Valores fornecidos
n <- c(47, 29, 36, 39, 54, 69, 66, 35, 30, 25, 33, 25,
30, 28, 43, 35, 38, 39, 51, 50, 50, 49, 46, 32,
4, 9, 63, 59, 57, 66, 56, 68, 59, 84, 59, 77,
65, 78, 82, 78, 67, 94, 88, 93, 87, 116, 126, 65,
91, 119, 120, 114, 141, 110, 111, 137, 113, 116, 130, 71,
82, 144, 122, 142, 117, 120, 140, 127, 124, 93, 98,
69, 76, 138, 127, 126, 117, 122, 102)
# Criando o data frame
empresa <- data.frame(time = seq(as.Date("2004-01-01"), as.Date("2010-07-01"), by = "month"), n = n)
empresa_ts <- stats::ts(data = empresa$n, start = c(2004,1), end = c(2010,7), frequency = 12)
summario <- empresa %>%
dplyr::group_by() %>%
dplyr::summarise(média = mean(n),
desvio = sd(n))
knitr::kable(summario)
ggplot2::ggplot(data = empresa)+
aes(y = n, x = time)+
geom_line(col = "black")+
labs(y = "Números de Ações",
x = "",
title = "Número de Ações Judiciais")+
theme_bw()
stats::acf(empresa_ts,lag.max = 36, main = "Função de Autocorrelação (FAC)")
stats::pacf(empresa_ts,lag.max = 36, main = "Função de Autocorrelação Parcial (FACP)")
empresa_ts <- stats::ts(data = empresa$n,
start = c(2004,1), end = c(2010,7), frequency = 12)
empresa_tsibble <- as_tsibble(empresa_ts)
library(fable)
library(tsibble)
library(fabletools)
library(feasts)
library(fpp3)
empresa_tsibble <- as_tsibble(empresa_ts)
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value), prophet = prophet(value)) %>%
mutate(mixed = (ets + arima + prophet)/3)
# install.packages("fable.prophet")
library(fable.prophet)
install.packages("fable.prophet")
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value), prophet = prophet(value)) %>%
mutate(mixed = (ets + arima + prophet)/3)
# install.packages("fable.prophet")
library(fable.prophet)
# install.packages("fable.prophet")
library(fable.prophet)
library(fpp3)
install.packages("fable.prophet")
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value), prophet = prophet(value)) %>%
mutate(mixed = (ets + arima + prophet)/3)
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value)) %>%
mutate(mixed = (ets + arima )/2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value)) %>%
mutate(mixed = (ets + arima )/2) %>% report()
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value), ets = ETS(value)) %>% report()
mutate(mixed = (ets + arima + mean + naive)/4)
fit2 <- empresa_tsibble %>%
model(arima = ARIMA(value),
ets = ETS(value),
mean = MEAN(value),
naive = NAIVE(value)) %>%
mutate(mixed = (ets + arima + mean + naive)/4)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
pacman::p_load(tidyverse, DataExplorer, TSstudio, knitr,
forecast, fable, fabletools)
# Ajustar os modelos usando o pacote fable
auto_sarima_model <- empresa_tsibble %>%
fabletools::model(auto_arima = fable::ARIMA(value)) %>%
fabletools::report()
fit2 <- empresa_tsibble %>%
fabletools::model(mean = MEAN(value),
naive = NAIVE(value),
arima = ARIMA(value),
ets = ETS(value))
glance(fit2)
statist = glance(fit2)
View(statist)
fit2 <- empresa_tsibble %>%
fabletools::model(mean = MEAN(value),
naive = NAIVE(value),
arima = ARIMA(value),
ets = ETS(value),
ar = AR(value))
statist = glance(fit2)
View(statist)
fit2 <- empresa_tsibble %>%
fabletools::model(mean = MEAN(value),
naive = NAIVE(value),
arima = ARIMA(value),
ets = ETS(value),
neural = NNETAR(value))
statist = glance(fit2)
View(statist)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
ets = ETS(value),
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value)
# ets = ETS(value)
# neural = NNETAR(value)
)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value)
# ets = ETS(value)
# neural = NNETAR(value)
) %>% report()
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value)
manual_arima = ARIMA(value ~ pdq(0,1,2)),
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(0,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
) %>% report()
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(0,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(1,1,1))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(3,1,3))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value),
manual_arima = ARIMA(value ~ pdq(2,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
fit2 <- empresa_tsibble %>%
fabletools::model(
# mean = MEAN(value),
# naive = NAIVE(value),
arima = ARIMA(value)
# manual_arima = ARIMA(value ~ pdq(2,1,2))
# ets = ETS(value)
# neural = NNETAR(value)
)
statist = glance(fit2)
fc2 <- fit2 %>%
forecast(h = 12)
fc2 %>%
autoplot(empresa_tsibble)
knitr::opts_chunk$set(echo = TRUE)
Zt = c(20, 22, 24, 25, 30)
table_1 <- data.frame(t = c(1, 2, 3, 4, 5),
Zt = c(20, 22, 24, 25, 30))
table_1 <- data.frame(t = c(1, 2, 3, 4, 5),
Zt = c(20, 22, 24, 25, 30),
diferenciada = c(NA, diff(Zt)))
View(table_1)
knitr::kable(table_1)
forecast::autoplot(table_1$Zt)
base::plot(table_1$Zt)
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()
pacman::p_load(tidyverse)
pacman::p_load(tidyverse, ggplot2)
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()
ggplot2::ggplot(data = table_1)+
aes(x = t, y = Zt)+
geom_line()+
theme_bw()
mean(table_1$Zt)
var(table_1$Zt)
var(table_1$Zt)
# Calcular a autocovariância para lag 2
resultado_autocov_lag2 = autocovariance(table_1$Zt, lag=2)
# Calcular a autocovariância para lag 2
resultado_autocov_lag2 = posterior::autocovariance(table_1$Zt, lag=2)
setwd("~/Github/Projetos/IEEE/Projects/PropertyPrices")
data_raw = readxl::read_excel("imoveis_df.xlsx")
base::rm(list = ls())
data_raw = readxl::read_excel("imoveis_df.xlsx")
pacman::p_load(tidyverse)
data_raw = readxl::read_excel("imoveis_df.xlsx")
data_raw %>% glimpse()
View(data_raw)
base::rm(list = ls())
pacman::p_load(tidyverse)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::mutate(price = as.numeric(price))
data_raw %>% glimpse()
View(data_raw)
base::rm(list = ls())
pacman::p_load(tidyverse)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(bedrooms) | m2 != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(price))
View(data_raw)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names()
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(bedrooms) | m2 != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
View(data_raw)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(bedrooms) || !is.na(price)) %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(bedrooms) | !is.na(price)) %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(bedrooms)) %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(price)) %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(!is.na(price))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta")
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::mutate(m2 = as.numeric(gsub("\\.", "", m2)))
data_raw %>% glimpse()
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(m2, na.rm = T))
View(test)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw %>% glimpse()
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(m2, na.rm = T))
base::rm(list = ls())
pacman::p_load(tidyverse)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
data_raw %>% glimpse()
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(m2, na.rm = T))
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T))
View(test)
View(data_raw)
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta")
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::filter(price ! = "A partir de  315.000") %>%
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::filter(price != "A partir de  315.000") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
View(data_raw)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T))
View(test)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T),
media = media/6)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T),
media = media/10^4)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T),
media = media/10^3)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T),
media = media/10^3,
mediana = median(price, na.rm = T),
mediana = mediana/10/3)
test <- data_raw %>% group_by(bedrooms) %>%
summarise(media = mean(price, na.rm = T),
media = media/10^3,
mediana = median(price, na.rm = T))
data_raw = readxl::read_excel("imoveis_df.xlsx") %>%
janitor::clean_names() %>%
dplyr::filter(price != "Sob Consulta") %>%
dplyr::filter(price != "A partir de  315.000") %>%
dplyr::mutate(price = as.numeric(gsub("\\.", "", price)))
